#include <algorithm>
#include <cstring>
#include <functional>
#include <limits>
#include <stdexcept>

#include <boost/asio.hpp>

#include <ws-streaming/peer_write.hpp>

wss::peer_write::peer_write(boost::asio::ip::tcp::socket& socket)
    : socket(socket)
{
}

void wss::peer_write::set_backlog(std::size_t bytes)
{
    boost::system::error_code ec;

    // Ask the operating system to make the send buffer big enough to hold the entire
    // requested backlog (or at least the biggest value that will fit in an 'int').
    boost::asio::socket_base::send_buffer_size option(
        static_cast<int>(
            std::min<std::size_t>(
                bytes,
                std::numeric_limits<int>::max())));
    socket.set_option(option, ec);

    // Find out what the actual send buffer size is, which may be less than requested.
    socket.get_option(option, ec);

    // Calculate how much we must additionally be able to buffer in userspace to make
    // up the shortfall from what the operating system will actually buffer.
    std::size_t shortfall = bytes - static_cast<std::size_t>(std::max<int>(0, option.value()));

    buffer.resize(shortfall);
}
